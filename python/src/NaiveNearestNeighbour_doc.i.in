%feature("docstring") OT::NaiveNearestNeighbour
"Brute force algorithm for nearest-neighbour lookup.

Parameters
----------
sample : 2-d sequence of float
    Points.

See also
--------
NearestNeighbourAlgorithm, RegularGridNearestNeighbour, KDTree

Notes
-----

This algorithm compares distance to all points in input sample.
It can be used when sample size is very small, or in high dimension.
In other cases, KDTree is much faster.

Examples
--------
>>> import openturns as ot
>>> sample = ot.Normal(2).getSample(10)
>>> tree = ot.NaiveNearestNeighbour(sample)
>>> neighbour = sample[tree.query([0.1, 0.2])]"

// ---------------------------------------------------------------------

%feature("docstring") OT::NaiveNearestNeighbour::setSample
"Collection of points accessor.

Parameters
----------
sample : :class:`~openturns.Sample`
    Input points."

// ---------------------------------------------------------------------

%feature("docstring") OT::NaiveNearestNeighbour::getSample
"Collection of points accessor.

Returns
-------
points : :class:`~openturns.Sample`
    Collection of points."

// ---------------------------------------------------------------------

%feature("docstring") OT::NaiveNearestNeighbour::query
"Accessor to the nearest neighbour index.

Parameters
----------
x : sequence of float
    Given point.

Returns
-------
index : int
    Index of the nearest neighbour."

// ---------------------------------------------------------------------

%feature("docstring") OT::NaiveNearestNeighbour::query_k
"Accessor to the nearest neighbours indices.

Parameters
----------
x : sequence of float
    Given point.
k : int
    Number of points to return
sorted : bool
    Whether to return the points sorted

Returns
-------
indices : :class:`~openturns.Indices`
    Indices of the k nearest neighbours."

