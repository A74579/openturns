%feature("docstring") OT::VertexFunction
"Temporal function.

    VertexFunction(*h*)

Parameters
----------
h : :class:`~openturns.Function`
    Function :math:`h: \Rset^n \mapsto \Rset^d`.

Notes
-----
A vertex function
:math:`f_{temp}: \cD \times \Rset^d \mapsto \cD \times \Rset^q`, with
:math:`\cD \in \Rset^n`, is a particular
:class:`field function <openturns.FieldFunction>` that lets invariant
the mesh of a field and defined by a function
:math:`h : \Rset^n \times \Rset^d \mapsto \Rset^q` such that:

.. math::

  f_{temp}(\vect{t}, \vect{x})=(\vect{t}, h(\vect{t},\vect{x}))

Let's note that the input dimension of :math:`f_{temp}` still design the
dimension of :math:`\vect{x}`: :math:`d`. Its output dimension is equal to
:math:`q`.

See also
--------
ValueFunction

Examples
--------
>>> import openturns as ot

Create a function :math:`h : \Rset^n \times \Rset^d \mapsto \Rset^q` such as:

.. math::

    h: \left|\begin{array}{rcl}
                \Rset & \rightarrow & \Rset \\
                t & \mapsto & t^2
            \end{array}\right.

>>> h = ot.SymbolicFunction('t', 't^2')

Convert :math:`h` into a vertex function:

>>> myVertexFunction = ot.VertexFunction(h)
>>> # Create a TimeSeries
>>> tg = ot.RegularGrid(0.0, 0.2, 6)
>>> data = ot.Sample(tg.getN(), h.getInputDimension())
>>> for i in range(data.getSize()):
...     for j in range(data.getDimension()):
...         data[i, j] = i * data.getDimension() + j
>>> ts = ot.TimeSeries(tg, data)
>>> print(ts)
    [ t   v0  ]
0 : [ 0   0   ]
1 : [ 0.2 1   ]
2 : [ 0.4 2   ]
3 : [ 0.6 3   ]
4 : [ 0.8 4   ]
5 : [ 1   5   ]
>>> print(myVertexFunction(ts))
    [ t    y0   ]
0 : [ 0    0    ]
1 : [ 0.2  0.04 ]
2 : [ 0.4  0.16 ]
3 : [ 0.6  0.36 ]
4 : [ 0.8  0.64 ]
5 : [ 1    1    ]
"

// ---------------------------------------------------------------------

%feature("docstring") OT::VertexFunction::getFunction
"Get the function :math:`h` defining the vertex function.

Returns
-------
h : :class:`~openturns.Function`
    The function defining the vertex function
    :math:`h: \Rset^n \mapsto \Rset^d`.

Examples
--------
>>> import openturns as ot
>>> h = ot.SymbolicFunction('t', 't^2')
>>> n = 1
>>> myVertexFunction = ot.VertexFunction(h)
>>> print(myVertexFunction.getFunction())
[t]->[t^2]"
