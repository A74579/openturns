%feature("docstring") OT::MetaModelAlgorithm
"Base class to compute a metamodel.

Available constructor:
    MetaModelAlgorithm(*distribution, model*)

Parameters
----------
distribution : :class:`~openturns.Distribution`
    Joint probability density function of the physical input vector.
model : :class:`~openturns.Function`
    Physical model to be approximated by a metamodel.

Notes
-----
A MetaModelAlgorithm object can be used only through its derived classes:

- :class:`~openturns.KrigingAlgorithm`

- :class:`~openturns.FunctionalChaosAlgorithm`"

// ---------------------------------------------------------------------


%feature("docstring") OT::MetaModelAlgorithm::BuildDistribution
"Recover the distribution, with metamodel performance in mind.

For each marginal, find the best 1-d continuous parametric model,
else fallback to the use of :class:`~openturns.KernelSmoothing`.
For the copula, the Spearman independance test is used on each component pair
to decide whether an independent copula can be used,
else use a :class:`~openturns.NormalCopula`.

Parameters
----------
sample : :class:`~openturns.Sample`
    Input sample.

Returns
-------
distribution : :class:`~openturns.Distribution`
    Input distribution."
// ---------------------------------------------------------------------

%feature("docstring") OT::MetaModelAlgorithm::getDistribution
"Accessor to the joint probability density function of the physical input vector.

Returns
-------
distribution : :class:`~openturns.Distribution`
    Joint probability density function of the physical input vector."

// ---------------------------------------------------------------------

%feature("docstring") OT::MetaModelAlgorithm::setDistribution
"Accessor to the joint probability density function of the physical input vector.

Parameters
----------
distribution : :class:`~openturns.Distribution`
    Joint probability density function of the physical input vector."

// ---------------------------------------------------------------------

%feature("docstring") OT::MetaModelAlgorithm::getInputSample
"Accessor to the input sample.

Returns
-------
inputSample : :class:`~openturns.Sample`
    Input sample of a model evaluated apart."

// ---------------------------------------------------------------------

%feature("docstring") OT::MetaModelAlgorithm::getOutputSample
"Accessor to the output sample.

Returns
-------
outputSample : :class:`~openturns.Sample`
    Output sample of a model evaluated apart."

// ---------------------------------------------------------------------

%feature("docstring") OT::MetaModelAlgorithm::run
"Compute the response surfaces.

Notes
-----
It computes the response surfaces and creates a
:class:`~openturns.MetaModelResult` structure containing all the results."