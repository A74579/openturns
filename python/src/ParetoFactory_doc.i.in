%feature("docstring") OT::ParetoFactory
"Pareto factory.

Available constructor:
    ParetoFactory()

Notes
-----
Several estimators to build a Pareto distribution from a scalar sample
are proposed.

**Moments based estimator:**

First \hat{\alpha}_l is found using numerical inversion of the relationship:

.. math::

    2 (1+\alpha)/(\alpha-3) \sqrt{\frac{\alpha - 2}{\alpha}} = \hat{Sk}

with :math:`\hat{Sk}` the skewness of the sample

Then the remaining parameters are derived from the moments:

.. math::

    \hat{\beta}_l &= (\alpha - 1) \sqrt{ \hat{\sigma} \frac{\alpha - 2}{\alpha}}\\
    \hat{\gamma}_l &= \hat{\mu} - \beta \frac{\alpha}{\alpha - 1}

**Maximum likelihood estimator:**

The generic maximum likelihood estimator is used.

**Least squares method estimator:**

The generic least-squares estimator is used.


See also
--------
DistributionFactory, Pareto"

// ----------------------------------------------------------------------------

%feature("docstring") OT::ParetoFactory::buildMethodOfLikelihoodMaximization
"Method of likelihood maximization.

Refer to :class:`~openturns.MaximumLikelihoodFactory`.

Parameters
----------
sample : :class:`~openturns.Sample`
    Data

Returns
-------
distribution : :class:`~openturns.Pareto`
    The estimated distribution"


// ----------------------------------------------------------------------------

%feature("docstring") OT::ParetoFactory::buildMethodOfMoments
"Method of moments estimator.

.. math::
    :nowrap:

    \begin{eqnarray*}
      \displaystyle\Hat{\gamma}_n = (1-\mathrm{sign}(x_{(1,n)})/(2+n))x_{(1,n)}\\
      (\Hat{\alpha}_n,\Hat{\beta}_n)\mbox{ solution of }\left\{
      \begin{array}{l}
        \bar{x}_n=\Hat{\gamma}_n+\Hat{\alpha}_n+\Gamma(1+1/\Hat{\beta}_n)\\
        (\sigma_n^X)^2=\Hat{\alpha}_n\left(\Gamma(1+2/\Hat{\beta}_n)-\Gamma(1+1/\Hat{\beta}_n)^2\right)
      \end{array}\right.
    \end{eqnarray*}

Parameters
----------
sample : :class:`~openturns.Sample`
    Data

Returns
-------
distribution : :class:`~openturns.Pareto`
    The estimated distribution"

// ----------------------------------------------------------------------------

%feature("docstring") OT::ParetoFactory::buildAsPareto
"Estimate the distribution as native distribution.

Parameters
----------
sample : :class:`~openturns.Sample`
    Data

Returns
-------
distribution : :class:`~openturns.Pareto`
    The estimated distribution"
